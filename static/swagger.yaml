swagger: '2.0'
info:
  title: "Ecommerce API"
  description: "API that includes resources to manage an ecommerce website"
  version: "1.0.0"
host: "127.0.0.1:5000" #working on local host
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header
#routes
paths: 
#Login Path
  /customers/login: #specific URL endpoint
    post: #what kind of request you're sending
      tags:
        - Customer # creates a category for this route that can be reused on like routes
      summary: "Login endpoint (generates a token)"
      description: "Endpoint for user authentication and token generation."
      parameters:
        - in: "body"
          name: "body"
          description: "credentials for login (email and password)"
          required: true
          schema: 
            $ref: "#/definitions/LoginPayload"
      responses:
        200:
          description: "Login Successful"
          schema:
            $ref: '#/definitions/LoginResponse'
          examples:
            application/json:
              token: "fmksdfrkjdfrgvnjdnvg....."
              message: "successfully logged in"
              status: "success"

#GetAllCustomers Path
  /customers:
    get:
      tags:
        - Customer
      summary: "Retrieve a list of customer objects"
      description: "Endpoint to retrieve all customers, requires token authentication"
      security:
        - bearerAuth:
      responses:
        200:
          description: "Successfully retrieved all customers"
          schema:
            $ref: "#/definitions/GetCustomersResponse"
          examples:
            application/json:
              name: "Jes"
              email: "jvargas@gmail.com"
              phone: "859-698-5965"
              username: "jvargas25"
              admin: 1

    post:
      tags:
        - Customer
      summary: "Create a customer object"
      description: "Endpoint to create a customer in the e-commerce system"
      parameters:
        - in: "body"
          name: "body"
          description: "Customer object"
          required: true
          schema:
            $ref: "#/definitions/CreateCustomerPayload"
      responses:
        200:
          description: "Customer created successfully"
          schema:
            $ref: "#/definitions/CreateCustomerResponse"
          examples:
            application/json:
              name: "Delilah Ligma"
              email: "LDelilah12@email.com"
              phone: "321-968-5896"
              username: "DLigma"
              admin: 0

# adding items to the cart
  /customers/add-item: #go here to add an item to the cart. You will need to be logged in.
    post:
      tags:
        - Cart
      summary: "Add a product to the customer's cart"
      description: "Endpoint to add a product to the customer's cart"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Cart object"
          required: true
          schema:
            $ref: "#/definitions/AddToCartPayload"
      responses:
        200:
          description: "Products added to cart"
          schema:
            $ref: "#/definitions/AddToCartResponse"
          examples:
            application/json:
              message: "Products added to cart"

  /customers/remove-item:
    post:
      tags:
        - Cart
      summary: "Remove a product(s) from the customer's cart"
      description: "Endpoint to remove product(s) from the customer's cart"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Cart object"
          required: true
          schema:
            $ref: "#/definitions/RemoveItemFromCartPayload"
      responses:
        200:
          description: "Product removed from cart"
          schema:
            $ref: "#/definitions/RemoveItemFromCartResponse"
          examples:
            application/json:
              message: "Product removed from cart"

  /customers/view-cart:
    get:
      tags:
        - Cart
      summary: "View all products in the customer's cart"
      description: "Endpoint to view all products in the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Cart contents retrieved"
          schema:
            $ref: "#/definitions/ViewCartResponse"
          examples:
            application/json:
              customer_id: 2
              products:
                - id: 1
                  price: 189.99
                  name: "Wheelchair"
                - id: 2
                  price: 250
                  name: "Toaster"

  /customers/empty-cart:
    delete:
      tags:
        - Cart
      summary: "Remove all products from the customer's cart"
      description: "Endpoint to empty the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Cart has been emptied"
          schema:
            $ref: "#/definitions/EmptyCartReponse"
          examples:
            application/json:
              message: "Cart has been emptied"

  /customers/place-order:
    post:
      tags:
        - Cart
      summary: "Place an order with the products in the customer's cart"
      description: "Endpoint to place an order with the products in the customer's cart"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Order placed successfully"
          schema:
            $ref: "#/definitions/PlaceOrderResponse"
          examples:
            application/json:
              message: "Order placed successfully"
              order_date: "date"
              order_id: 1
          

#GetAllProducts Path
  /products:
    get:
      tags:
        - Product
      summary: "Retrieve a list of product objects"
      description: "Endpont to retrieve all products, requires token authentication"
      responses:
        200:
          description: "Successfully retrieved all products"
          schema:
            $ref: "#/definitions/GetProductsResponse"
          examples:
            application/json:
              name: "Toaster"
              price: 250
    post:
      tags:
        - Product
      summary: "Create a product object in our e-commerce system"
      description: "Endpoint to create a product object"
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Product object"
          required: true
          schema:
            $ref: "#/definitions/CreateProductPayload"
      responses:
        200:
          description: "Product created successfully"
          schema:
            $ref: "#/definitions/CreateProductResponse"
          examples:
            application/json:
              name: "Sceptre Monitor"
              price: 149.99
                        
  /products/search:
    get:
      tags:
        - Product
      summary: "Retrieve a specific product object"
      description: "Endpont to retrieve a specific product, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully product"
          schema:
            $ref: "#/definitions/GetProductsResponse"
          examples:
            application/json:
              name: "Toaster"
              price: 250

#GetAllOrders Path
  /orders:
    get:
      tags:
        - Order
      summary: "Retrieve a list of order objects"
      description: "Endpont to retrieve all orders, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved all orders"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              order_id: 1
              customer_id: 2
              product_id: 2
              
  /orders/<int:order_id>:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order by order id"
      description: "Endpoint to retrieve a specific order, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved order"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              order_id: 1
              customer_id: 2
              product_id: 2
              
  /orders/<int:customer_id>:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order by customer id"
      description: "Endpoint to retrieve a specific order, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved order"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              order_id: 1
              customer_id: 2
              product_id: 2
              
  /orders/customer-email:
    get:
      tags:
        - Order
      summary: "Retrieve a specific order by customer email address"
      description: "Endpoint to retrieve a specific order, requires token authentication"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Successfully retrieved order"
          schema:
            $ref: "#/definitions/GetOrdersResponse"
          examples:
            application/json:
              order_id: 1
              customer_id: 2
              product_id: 2

#Payloads and Responses
definitions: 
#Login Definitions
  LoginPayload:
    type: "object" #sending a JSON object
    properties: 
      email:
        type: "string"
        description: "email"
      password:
        type: "string"
        description: "password"
    required:
      - "email"
      - "password"

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
        description: "Authentication token on successful login"
      message:
        type: "string"
        description: "Message indicating success or failure"
      status:
        type: "string"
        description: "Status of operation"
    required:
      - "message"
      - "status"

#Get all customers Definitions

  GetCustomersResponse:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "Jes"
      phone:
        type: "string"
        example: "859-698-5965"
      email:
        type: "string"
        example: "jvargas@gmail.com"
      password:
        type: "string"
        example: "Jellybean25"
      username:
        type: "string"
        example: "jvargas25"
      admin:
        type: "integer"
        description: "Admin permission"
        example: 1
        
  CreateCustomerPayload:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "Jes"
      phone:
        type: "string"
        example: "859-698-5965"
      email:
        type: "string"
        example: "jvargas@gmail.com"
      password:
        type: "string"
        example: "Jellybean25"
      username:
        type: "string"
        example: "jvargas25"
      admin:
        type: "integer"
        description: "Admin permission"
        example: 1
    required:
      - name
      - phone
      - email
      - password
      - username
      - admin

  CreateCustomerResponse:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "Jes"
      phone:
        type: "string"
        example: "859-698-5965"
      email:
        type: "string"
        example: "jvargas@gmail.com"
      password:
        type: "string"
        example: "Jellybean25"
      username:
        type: "string"
        example: "jvargas25"
      admin:
        type: "integer"
        description: "Admin permission"
        example: 1


  GetProductsResponse:
    type: "object"
    properties:
      name: 
        type: "string"
        example: "Toaster"
      price: 
        type: "float"
        example: 250
        

  CreateProductPayload:
    type: "object"
    properties:
      price:
        type: "number"
        format: "float"
        description: "Price of the product"
      name:
        type: "string"
        example: "Sceptre Monitor"
    required:
      - price
      - name
  

  CreateProductResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        example: "3"
      price:
        type: "number"
        format: "float"
        example: 149.99
      name:
        type: "string"
        example: "Sceptre Monitor"

  GetOrdersResponse:
    type: "object"
    properties:
      id:
        type: "integer"
        description: "Order ID"
      customer_id:
        type: "integer"
        description: "ID of the customer"
      order_date:
        type: "object"
        description: "Date and time when the order was placed"
      products:
        type: "array"
        description: "List of products in the order"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
              description: "Product ID"
            name:
              type: "string"
              description: "Name of the product"
            price:
              type: "float"
              description: "Product price"

  AddToCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        example: "1"
      product_id:
        type: "object"
        example: "[1, 2]"
    required:
      - customer_id
      - product_id

  AddToCartResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "products added to cart"

  RemoveItemFromCartPayload:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        example: "1"
      product_id:
        type: "object"
        example: "[1]"
    required:
      - customer_id
      - product_id


  RemoveItemFromCartResponse:
    type: "object"
    properties:
      message:
        type: "string"
        description: "Product removed from cart"

  ViewCartResponse:
    type: "object"
    properties:
      customer_id:
        type: "integer"
        description: "ID of the customer"
      products:
        type: "array"
        items:
          type: "object"
          properties:
            id:
              type: "integer"
              description: "Product ID"
            price:
              type: "number"
              format: "float"
              description: "Product price"
            name:
              type: "string"
              description: "Name of the product"

  EmptyCartReponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "cart has been emptied"

  PlaceOrderResponse:
    type: "object"
    properties:
      message:
        type: "string"
        example: "Order placed succesfully"
      order_date:
        type: "object"
        example: "Mon, 16 Sep 2024 00:00:00 GMT"
      order_id:
        type: "integer"
        example: "5"